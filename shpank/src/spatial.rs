use std::{path::Path, str::FromStr};

use serde::{Deserialize, Serialize};

use crate::{
    dbase::{DbaseFile, DbaseRecord},
    parse::{self, Error, Result},
    shape::{Shape, ShpFile, ShpRecord},
};

/// Wraps a [`ShpFile`] along its [`DbaseFile`] with the guarantee
/// that on creation the number of records are equal.
#[derive(Debug, Clone)]
pub struct Spatial {
    pub shp: ShpFile,
    pub dbf: DbaseFile,
}

impl Spatial {
    pub fn new<P: AsRef<Path>>(shp: P, dbf: P) -> Result<Self> {
        let shp = parse::Parser::parse_shp_file(shp)?;
        let dbf = parse::Parser::parse_dbf_file(dbf)?;

        let shp_num = shp.records.len();
        let dbf_num = dbf.records.len();
        if shp_num != dbf_num {
            return Err(Error::UnexpectedData(format!(
                "Shapefile # records not equal to dBASE: {shp_num} vs {dbf_num}"
            )));
        }

        Ok(Self { shp, dbf })
    }

    pub fn into_objects(self) -> Vec<Object> {
        let fclass_idx = self
            .dbf
            .header
            .index_of("fclass")
            .expect("dBASE without fclass unhandled");
        let name_idx = self
            .dbf
            .header
            .index_of("name")
            .expect("dBASE without name unhandled");

        self.records()
            .map(|(shp, dbf)| Object {
                shape: shp.shape.clone(),
                fclass: FromStr::from_str(&dbf.entries[fclass_idx]).expect("expected known fclass"),
                name: dbf.entries[name_idx].clone(),
            })
            .collect()
    }

    pub fn into_named_objects(self) -> Vec<Object> {
        let fclass_idx = self
            .dbf
            .header
            .index_of("fclass")
            .expect("dBASE without fclass unhandled");
        let name_idx = self
            .dbf
            .header
            .index_of("name")
            .expect("dBASE without name unhandled");

        self.records()
            .filter(|(_, dbf)| !dbf.entries[name_idx].is_empty())
            .map(|(shp, dbf)| Object {
                shape: shp.shape.clone(),
                fclass: FromStr::from_str(&dbf.entries[fclass_idx]).expect("expected known fclass"),
                name: dbf.entries[name_idx].clone(),
            })
            .collect()
    }
}

impl Spatial {
    pub fn num_records(&self) -> usize {
        self.shp.records.len()
    }

    pub fn records(&self) -> RecordsIterator {
        RecordsIterator {
            spatial: self,
            index: 0,
        }
    }
}

#[derive(Debug, Clone)]
pub struct Object {
    pub shape: Shape,
    pub fclass: Fclass,
    pub name: String,
}

pub struct RecordsIterator<'a> {
    spatial: &'a Spatial,
    index: usize,
}

impl<'a> Iterator for RecordsIterator<'a> {
    type Item = (&'a ShpRecord, &'a DbaseRecord);

    fn next(&mut self) -> Option<Self::Item> {
        if self.index < self.spatial.shp.records.len() {
            let result = (
                &self.spatial.shp.records[self.index],
                &self.spatial.dbf.records[self.index],
            );
            self.index += 1;
            Some(result)
        } else {
            None
        }
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq, Eq, Hash)]
pub enum Fclass {
    Airport,
    Allotments,
    Apron,
    Archaeological,
    ArtsCentre,
    Artwork,
    Atm,
    Attraction,
    Beach,
    Bakery,
    Bank,
    Bar,
    Battlefield,
    BeautyShop,
    Bench,
    Beverages,
    BicycleRental,
    BicycleShop,
    Biergarten,
    Bookshop,
    BusStation,
    BusStop,
    Busway,
    Butcher,
    Cafe,
    CameraSurveillance,
    CampSite,
    CaravanSite,
    CarDealership,
    CarRental,
    CarSharing,
    CarWash,
    Castle,
    CaveEntrance,
    Cemetery,
    Chalet,
    Chemist,
    Christian,
    ChristianAnglican,
    ChristianCatholic,
    ChristianEvangelical,
    ChristianLutheran,
    ChristianMethodist,
    ChristianOrthodox,
    ChristianProtestant,
    Cinema,
    City,
    Cliff,
    Clinic,
    Clothes,
    College,
    Commercial,
    CommsTower,
    CommunityCentre,
    ComputerShop,
    Convenience,
    County,
    Courthouse,
    Cycleway,
    Dam,
    Dentist,
    DepartmentStore,
    Doctors,
    DogPark,
    Doityourself,
    Drain,
    DrinkingWater,
    Embassy,
    Farm,
    Farmland,
    Farmyard,
    FastFood,
    FerryTerminal,
    FireStation,
    Florist,
    FoodCourt,
    Footway,
    Forest,
    Fort,
    Fountain,
    Fuel,
    FurnitureShop,
    GardenCentre,
    General,
    GiftShop,
    Glacier,
    GolfCourse,
    Grass,
    Graveyard,
    Greengrocer,
    Guesthouse,
    Hairdresser,
    Hamlet,
    Heath,
    Helipad,
    Hindu,
    Hospital,
    Hostel,
    Hotel,
    HuntingStand,
    IceRink,
    Industrial,
    Island,
    Jeweller,
    Jewish,
    Kindergarten,
    Kiosk,
    Laundry,
    Library,
    Lighthouse,
    LightRail,
    LivingStreet,
    Locality,
    LockGate,
    Mall,
    Marina,
    MarketPlace,
    Meadow,
    Memorial,
    Military,
    MiniatureRailway,
    MiniRoundabout,
    MobilePhoneShop,
    Monorail,
    Monument,
    Motel,
    Motorway,
    MotorwayJunction,
    MotorwayLink,
    Museum,
    Muslim,
    MuslimSunni,
    MuslimSunnicity,
    NarrowGauge,
    NationalCapital,
    NatureReserve,
    Newsagent,
    Nightclub,
    NursingHome,
    ObservationTower,
    Optician,
    Orchard,
    OutdoorShop,
    Park,
    Parking,
    ParkingBicycle,
    ParkingMultistorey,
    ParkingUnderground,
    Path,
    Peak,
    Pedestrian,
    Pharmacy,
    PicnicSite,
    Pier,
    Pitch,
    Playground,
    Police,
    PostBox,
    PostOffice,
    Primary,
    PrimaryLink,
    Prison,
    Pub,
    PublicBuilding,
    Quarry,
    Rail,
    RailwayHalt,
    RailwayStation,
    RecreationGround,
    Recycling,
    RecyclingClothes,
    RecyclingGlass,
    RecyclingMetal,
    RecyclingPaper,
    Region,
    Reservoir,
    Residential,
    Restaurant,
    Retail,
    River,
    Riverbank,
    Ruins,
    School,
    Scrub,
    Secondary,
    SecondaryLink,
    Service,
    Shelter,
    ShoeShop,
    Sikhbeach,
    Slipway,
    SpeedCamera,
    SportsCentre,
    SportsShop,
    Spring,
    Stadium,
    Stationery,
    Steps,
    Stop,
    Streamdock,
    StreetLamp,
    Suburb,
    Subway,
    Supermarket,
    SwimmingPool,
    Taxi,
    Taxibuddhist,
    Telephone,
    Tertiary,
    TertiaryLink,
    Theatre,
    ThemePark,
    Toilet,
    TouristInfo,
    Tower,
    Town,
    TownHall,
    ToyShop,
    Track,
    TrackGrade1,
    TrackGrade2,
    TrackGrade3,
    TrackGrade4,
    TrackGrade5,
    TrafficSignals,
    Trambridleway,
    TramStopdam,
    TravelAgent,
    Tree,
    TreealpineHut,
    Trunk,
    TrunkLink,
    TurningCircle,
    Unclassified,
    University,
    Unknownbuildingcanal,
    VendingAny,
    VendingMachine,
    VendingParking,
    Veterinary,
    VideoShop,
    Viewpoint,
    Village,
    VillagealpineHut,
    Vineyardcity,
    Volcanoairfield,
    WasteBasket,
    WastewaterPlant,
    Water,
    Waterfall,
    WaterMill,
    WaterTower,
    WaterWell,
    WaterWorks,
    WaysideCross,
    WaysideShrine,
    Weirbeach,
    Weirbuddhist,
    Wetlandairfield,
    Windmill,
    Zoocrossing,
    Zoofunicular,
}

impl FromStr for Fclass {
    type Err = parse::Error;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        let v = match s {
            "airport" => Self::Airport,
            "allotments" => Self::Allotments,
            "apron" => Self::Apron,
            "archaeological" => Self::Archaeological,
            "arts_centre" => Self::ArtsCentre,
            "artwork" => Self::Artwork,
            "atm" => Self::Atm,
            "attraction" => Self::Attraction,
            "beach" => Self::Beach,
            "bakery" => Self::Bakery,
            "bank" => Self::Bank,
            "bar" => Self::Bar,
            "battlefield" => Self::Battlefield,
            "beauty_shop" => Self::BeautyShop,
            "bench" => Self::Bench,
            "beverages" => Self::Beverages,
            "bicycle_rental" => Self::BicycleRental,
            "bicycle_shop" => Self::BicycleShop,
            "biergarten" => Self::Biergarten,
            "bookshop" => Self::Bookshop,
            "bus_station" => Self::BusStation,
            "bus_stop" => Self::BusStop,
            "busway" => Self::Busway,
            "butcher" => Self::Butcher,
            "cafe" => Self::Cafe,
            "camera_surveillance" => Self::CameraSurveillance,
            "camp_site" => Self::CampSite,
            "caravan_site" => Self::CaravanSite,
            "car_dealership" => Self::CarDealership,
            "car_rental" => Self::CarRental,
            "car_sharing" => Self::CarSharing,
            "car_wash" => Self::CarWash,
            "castle" => Self::Castle,
            "cave_entrance" => Self::CaveEntrance,
            "cemetery" => Self::Cemetery,
            "chalet" => Self::Chalet,
            "chemist" => Self::Chemist,
            "christian" => Self::Christian,
            "christian_anglican" => Self::ChristianAnglican,
            "christian_catholic" => Self::ChristianCatholic,
            "christian_evangelical" => Self::ChristianEvangelical,
            "christian_lutheran" => Self::ChristianLutheran,
            "christian_methodist" => Self::ChristianMethodist,
            "christian_orthodox" => Self::ChristianOrthodox,
            "christian_protestant" => Self::ChristianProtestant,
            "cinema" => Self::Cinema,
            "city" => Self::City,
            "cliff" => Self::Cliff,
            "clinic" => Self::Clinic,
            "clothes" => Self::Clothes,
            "college" => Self::College,
            "commercial" => Self::Commercial,
            "comms_tower" => Self::CommsTower,
            "community_centre" => Self::CommunityCentre,
            "computer_shop" => Self::ComputerShop,
            "convenience" => Self::Convenience,
            "county" => Self::County,
            "courthouse" => Self::Courthouse,
            "cycleway" => Self::Cycleway,
            "dam" => Self::Dam,
            "dentist" => Self::Dentist,
            "department_store" => Self::DepartmentStore,
            "doctors" => Self::Doctors,
            "dog_park" => Self::DogPark,
            "doityourself" => Self::Doityourself,
            "drain" => Self::Drain,
            "drinking_water" => Self::DrinkingWater,
            "embassy" => Self::Embassy,
            "farm" => Self::Farm,
            "farmland" => Self::Farmland,
            "farmyard" => Self::Farmyard,
            "fast_food" => Self::FastFood,
            "ferry_terminal" => Self::FerryTerminal,
            "fire_station" => Self::FireStation,
            "florist" => Self::Florist,
            "food_court" => Self::FoodCourt,
            "footway" => Self::Footway,
            "forest" => Self::Forest,
            "fort" => Self::Fort,
            "fountain" => Self::Fountain,
            "fuel" => Self::Fuel,
            "furniture_shop" => Self::FurnitureShop,
            "garden_centre" => Self::GardenCentre,
            "general" => Self::General,
            "gift_shop" => Self::GiftShop,
            "glacier" => Self::Glacier,
            "golf_course" => Self::GolfCourse,
            "grass" => Self::Grass,
            "graveyard" => Self::Graveyard,
            "greengrocer" => Self::Greengrocer,
            "guesthouse" => Self::Guesthouse,
            "hairdresser" => Self::Hairdresser,
            "hamlet" => Self::Hamlet,
            "heath" => Self::Heath,
            "helipad" => Self::Helipad,
            "hindu" => Self::Hindu,
            "hospital" => Self::Hospital,
            "hostel" => Self::Hostel,
            "hotel" => Self::Hotel,
            "hunting_stand" => Self::HuntingStand,
            "ice_rink" => Self::IceRink,
            "industrial" => Self::Industrial,
            "island" => Self::Island,
            "jeweller" => Self::Jeweller,
            "jewish" => Self::Jewish,
            "kindergarten" => Self::Kindergarten,
            "kiosk" => Self::Kiosk,
            "laundry" => Self::Laundry,
            "library" => Self::Library,
            "lighthouse" => Self::Lighthouse,
            "light_rail" => Self::LightRail,
            "living_street" => Self::LivingStreet,
            "locality" => Self::Locality,
            "lock_gate" => Self::LockGate,
            "mall" => Self::Mall,
            "marina" => Self::Marina,
            "market_place" => Self::MarketPlace,
            "meadow" => Self::Meadow,
            "memorial" => Self::Memorial,
            "military" => Self::Military,
            "miniature_railway" => Self::MiniatureRailway,
            "mini_roundabout" => Self::MiniRoundabout,
            "mobile_phone_shop" => Self::MobilePhoneShop,
            "monorail" => Self::Monorail,
            "monument" => Self::Monument,
            "motel" => Self::Motel,
            "motorway" => Self::Motorway,
            "motorway_junction" => Self::MotorwayJunction,
            "motorway_link" => Self::MotorwayLink,
            "museum" => Self::Museum,
            "muslim" => Self::Muslim,
            "muslim_sunni" => Self::MuslimSunni,
            "muslim_sunnicity" => Self::MuslimSunnicity,
            "narrow_gauge" => Self::NarrowGauge,
            "national_capital" => Self::NationalCapital,
            "nature_reserve" => Self::NatureReserve,
            "newsagent" => Self::Newsagent,
            "nightclub" => Self::Nightclub,
            "nursing_home" => Self::NursingHome,
            "observation_tower" => Self::ObservationTower,
            "optician" => Self::Optician,
            "orchard" => Self::Orchard,
            "outdoor_shop" => Self::OutdoorShop,
            "park" => Self::Park,
            "parking" => Self::Parking,
            "parking_bicycle" => Self::ParkingBicycle,
            "parking_multistorey" => Self::ParkingMultistorey,
            "parking_underground" => Self::ParkingUnderground,
            "path" => Self::Path,
            "peak" => Self::Peak,
            "pedestrian" => Self::Pedestrian,
            "pharmacy" => Self::Pharmacy,
            "picnic_site" => Self::PicnicSite,
            "pier" => Self::Pier,
            "pitch" => Self::Pitch,
            "playground" => Self::Playground,
            "police" => Self::Police,
            "post_box" => Self::PostBox,
            "post_office" => Self::PostOffice,
            "primary" => Self::Primary,
            "primary_link" => Self::PrimaryLink,
            "prison" => Self::Prison,
            "pub" => Self::Pub,
            "public_building" => Self::PublicBuilding,
            "quarry" => Self::Quarry,
            "rail" => Self::Rail,
            "railway_halt" => Self::RailwayHalt,
            "railway_station" => Self::RailwayStation,
            "recreation_ground" => Self::RecreationGround,
            "recycling" => Self::Recycling,
            "recycling_clothes" => Self::RecyclingClothes,
            "recycling_glass" => Self::RecyclingGlass,
            "recycling_metal" => Self::RecyclingMetal,
            "recycling_paper" => Self::RecyclingPaper,
            "region" => Self::Region,
            "reservoir" => Self::Reservoir,
            "residential" => Self::Residential,
            "restaurant" => Self::Restaurant,
            "retail" => Self::Retail,
            "river" => Self::River,
            "riverbank" => Self::Riverbank,
            "ruins" => Self::Ruins,
            "school" => Self::School,
            "scrub" => Self::Scrub,
            "secondary" => Self::Secondary,
            "secondary_link" => Self::SecondaryLink,
            "service" => Self::Service,
            "shelter" => Self::Shelter,
            "shoe_shop" => Self::ShoeShop,
            "sikhbeach" => Self::Sikhbeach,
            "slipway" => Self::Slipway,
            "speed_camera" => Self::SpeedCamera,
            "sports_centre" => Self::SportsCentre,
            "sports_shop" => Self::SportsShop,
            "spring" => Self::Spring,
            "stadium" => Self::Stadium,
            "stationery" => Self::Stationery,
            "steps" => Self::Steps,
            "stop" => Self::Stop,
            "streamdock" => Self::Streamdock,
            "street_lamp" => Self::StreetLamp,
            "suburb" => Self::Suburb,
            "subway" => Self::Subway,
            "supermarket" => Self::Supermarket,
            "swimming_pool" => Self::SwimmingPool,
            "taxi" => Self::Taxi,
            "taxibuddhist" => Self::Taxibuddhist,
            "telephone" => Self::Telephone,
            "tertiary" => Self::Tertiary,
            "tertiary_link" => Self::TertiaryLink,
            "theatre" => Self::Theatre,
            "theme_park" => Self::ThemePark,
            "toilet" => Self::Toilet,
            "tourist_info" => Self::TouristInfo,
            "tower" => Self::Tower,
            "town" => Self::Town,
            "town_hall" => Self::TownHall,
            "toy_shop" => Self::ToyShop,
            "track" => Self::Track,
            "track_grade1" => Self::TrackGrade1,
            "track_grade2" => Self::TrackGrade2,
            "track_grade3" => Self::TrackGrade3,
            "track_grade4" => Self::TrackGrade4,
            "track_grade5" => Self::TrackGrade5,
            "traffic_signals" => Self::TrafficSignals,
            "trambridleway" => Self::Trambridleway,
            "tram_stopdam" => Self::TramStopdam,
            "travel_agent" => Self::TravelAgent,
            "tree" => Self::Tree,
            "treealpine_hut" => Self::TreealpineHut,
            "trunk" => Self::Trunk,
            "trunk_link" => Self::TrunkLink,
            "turning_circle" => Self::TurningCircle,
            "unclassified" => Self::Unclassified,
            "university" => Self::University,
            "unknownbuildingcanal" => Self::Unknownbuildingcanal,
            "vending_any" => Self::VendingAny,
            "vending_machine" => Self::VendingMachine,
            "vending_parking" => Self::VendingParking,
            "veterinary" => Self::Veterinary,
            "video_shop" => Self::VideoShop,
            "viewpoint" => Self::Viewpoint,
            "village" => Self::Village,
            "villagealpine_hut" => Self::VillagealpineHut,
            "vineyardcity" => Self::Vineyardcity,
            "volcanoairfield" => Self::Volcanoairfield,
            "waste_basket" => Self::WasteBasket,
            "wastewater_plant" => Self::WastewaterPlant,
            "water" => Self::Water,
            "waterfall" => Self::Waterfall,
            "water_mill" => Self::WaterMill,
            "water_tower" => Self::WaterTower,
            "water_well" => Self::WaterWell,
            "water_works" => Self::WaterWorks,
            "wayside_cross" => Self::WaysideCross,
            "wayside_shrine" => Self::WaysideShrine,
            "weirbeach" => Self::Weirbeach,
            "weirbuddhist" => Self::Weirbuddhist,
            "wetlandairfield" => Self::Wetlandairfield,
            "windmill" => Self::Windmill,
            "zoocrossing" => Self::Zoocrossing,
            "zoofunicular" => Self::Zoofunicular,
            others => {
                return Err(Error::UnexpectedData(format!(
                    "unexpected fclass: {others}"
                )))
            }
        };

        Ok(v)
    }
}
